version: '3.9'
services:

  pc_db:
    container_name: pc_db
    image: postgres:13.2-alpine
    networks:
      - pc_network
    restart: always
    ports:
      - ${BACKEND_DB_PORT}:${BACKEND_DB_PORT}
    environment:
      POSTGRES_USER: ${BACKEND_DB_USER}
      POSTGRES_PASSWORD: ${BACKEND_DB_PASSWORD}
      POSTGRES_DB: ${BACKEND_DB_NAME}
      PGPORT: ${BACKEND_DB_PORT}
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${BACKEND_DB_USER} -d ${BACKEND_DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s

  pc_api:
    build: .
    container_name: pc_api
    networks:
      - pc_network
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    environment:
      BACKEND_DB_HOST: ${BACKEND_DB_HOST}
      BACKEND_DB_PORT: ${BACKEND_DB_PORT}
      BACKEND_DB_NAME: ${BACKEND_DB_NAME}
      BACKEND_DB_USER: ${BACKEND_DB_USER}
      BACKEND_DB_PASSWORD: ${BACKEND_DB_PASSWORD}
      BACKEND_HOST: ${BACKEND_HOST}
      BACKEND_PORT: ${BACKEND_PORT}
    volumes:
      - ./backend:/project/backend:rw
    depends_on:
      pc_db:
        condition: service_healthy
    init: true

networks:
  pc_network:
    name: pc_network
    driver: bridge

volumes:
  db_data:
